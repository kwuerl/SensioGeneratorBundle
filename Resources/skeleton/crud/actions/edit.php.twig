
    /**
{% block phpdoc_method_header %}
     * Displays a form to edit an existing {{ entity }} entity.
{% endblock phpdoc_method_header %}
     *
{% block phpdoc_method_annotations %}
     * @ApiDoc(
     *   resource = true,
     *   statusCodes={
     *     200 = "Returned when successful",
     *     404 = "Returned when the {{ entity }} is not found"
     *   }
     * )
     *
     * @Annotations\View(template = "{{ bundle }}:{{ entity|replace({'\\': '/'}) }}:edit.html.twig")
     * @Route("/{id}/edit", name="{{ route_name_prefix }}_edit")
     *
     * @param Request $request the request object
     * @param int     $id      the {{ entity }} id
     *
     * @return FormTypeInterface
     *
     * @throws NotFoundHttpException when {{ entity }} not exist
{% endblock phpdoc_method_annotations %}
     */
{% block method_definition %}
    public function editAction($id)
{% endblock method_definition %}
    {
{% block method_body %}
        $em = $this->getDoctrine()->getManager();

        ${{ entity_singularized }} = $em->getRepository('{{ bundle }}:{{ entity }}')->find($id);

        if (!${{ entity_singularized }}) {
            throw $this->createNotFoundException('Unable to find {{ entity }} entity.');
        }

        $editForm = $this->createEditForm(${{ entity_singularized }});
        $deleteForm = $this->createDeleteForm($id);
{% endblock method_body %}

{% block method_return %}
        return array(
            '{{ entity_singularized }}' => ${{ entity_singularized }},
            'edit_form' => $editForm->createView(),
            'delete_form' => $deleteForm->createView(),
        );
{% endblock method_return %}
    }

{% block form %}
    /**
    * Creates a form to edit a {{ entity }} entity.
    *
    * @param {{ entity_class }} ${{ entity_singularized }} The entity
    *
    * @return \Symfony\Component\Form\Form The form
    */
    private function createEditForm({{ entity_class }} ${{ entity_singularized }})
    {
        $form = $this->createForm(new {{ entity_class }}Type(), ${{ entity_singularized }}, array(
            'action' => $this->generateUrl('{{ route_name_prefix }}_update', array('id' => ${{ entity_singularized }}->getId())),
            'method' => 'PUT',
        ));

        $form->add('submit', 'submit', array('label' => 'Update'));

        return $form;
    }
{% endblock form %}
